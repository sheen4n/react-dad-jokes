{"version":3,"sources":["services/http.js","Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","baseURL","get","post","put","delete","Joke","votes","joke","downVote","upVote","className","onClick","style","borderColor","JokeList","useState","jokes","setJokes","isLoading","setIsLoading","getJoke","a","http","headers","Accept","data","jokeObj","id","uuidv4","Set","map","j","has","useEffect","initializeJokes","jokesArray","length","newJoke","push","syncJokesToLocalStorage","existingJokes","JSON","parse","window","localStorage","getItem","handleVote","delta","newJokesArray","fetchJokes","setItem","stringify","sortedJokes","sort","b","src","alt","key","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.50b44d18.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://icanhazdadjoke.com/';\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete\n};\n","import React from 'react';\nimport './Joke.css';\n\nconst Joke = ({ votes, joke, downVote, upVote }) => {\n  const getEmoji = () => {\n    if (votes >= 15) {\n      return 'em em-rolling_on_the_floor_laughing';\n    } else if (votes >= 12) {\n      return 'em em-laughing';\n    } else if (votes >= 9) {\n      return 'em em-smiley';\n    } else if (votes >= 6) {\n      return 'em em-slightly_smiling_face';\n    } else if (votes >= 3) {\n      return 'em em-neutral_face';\n    } else if (votes >= 0) {\n      return 'em em-confused';\n    } else {\n      return 'em em-angry';\n    }\n  };\n\n  const getColor = () => {\n    if (votes >= 15) {\n      return '#4CAF50';\n    } else if (votes >= 12) {\n      return '#8BC34A';\n    } else if (votes >= 9) {\n      return '#CDDC39';\n    } else if (votes >= 6) {\n      return '#FFEB3B';\n    } else if (votes >= 3) {\n      return '#FFC107';\n    } else if (votes >= 0) {\n      return '#FF9800';\n    } else {\n      return '#f44336';\n    }\n  };\n\n  return (\n    <div className='Joke'>\n      <div className='Joke-buttons'>\n        <i className='fas fa-arrow-up' onClick={upVote} />\n        <span className='Joke-votes' style={{ borderColor: getColor() }}>\n          {votes}\n        </span>\n        <i className='fas fa-arrow-down' onClick={downVote} />\n      </div>\n      <div className='Joke-text'>{joke}</div>\n      <div className='Joke-smiley'>\n        <i className={getEmoji()} />\n      </div>\n    </div>\n  );\n};\n\nexport default Joke;\n","import React, { useEffect, useState } from 'react';\nimport http from './services/http';\nimport './JokeList.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport Joke from './Joke';\n\nconst JokeList = () => {\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const INIT_JOKES_NUM = 5;\n  const FETCH_JOKES_NUM = 5;\n\n  const getJoke = async () => {\n    const {\n      data: { joke }\n    } = await http.get('/', {\n      headers: { Accept: 'application/json' }\n    });\n    const jokeObj = {\n      joke,\n      id: uuidv4(),\n      votes: 0\n    };\n\n    if (new Set([...jokes].map(j => j.joke)).has(jokeObj.joke)) return null;\n\n    return jokeObj;\n  };\n\n  useEffect(() => {\n    const initializeJokes = async () => {\n      setIsLoading(true);\n      let jokesArray = [];\n      while (jokesArray.length < INIT_JOKES_NUM) {\n        const newJoke = await getJoke();\n        if (newJoke) jokesArray.push(newJoke);\n      }\n      setJokes(jokesArray);\n      syncJokesToLocalStorage(jokesArray);\n      setIsLoading(false);\n    };\n\n    const existingJokes = JSON.parse(window.localStorage.getItem('jokes'));\n\n    (existingJokes && existingJokes.length) > 0\n      ? setJokes(existingJokes)\n      : initializeJokes();\n\n    return () => {};\n  }, []);\n\n  const handleVote = delta => id => () => {\n    const newJokesArray = [...jokes].map(joke =>\n      joke.id === id ? { ...joke, votes: joke.votes + delta } : joke\n    );\n    setJokes(newJokesArray);\n    syncJokesToLocalStorage(newJokesArray);\n  };\n\n  const fetchJokes = async () => {\n    setIsLoading(true);\n    let jokesArray = [];\n    while (jokesArray.length < FETCH_JOKES_NUM) {\n      const newJoke = await getJoke();\n      if (newJoke) jokesArray.push(newJoke);\n    }\n    setJokes([...jokes, ...jokesArray]);\n    syncJokesToLocalStorage([...jokes, ...jokesArray]);\n    setIsLoading(false);\n  };\n\n  const syncJokesToLocalStorage = jokesArray => {\n    window.localStorage.setItem('jokes', JSON.stringify(jokesArray));\n  };\n\n  if (isLoading)\n    return (\n      <div className='JokeList-spinner'>\n        <i className='far fa-8x fa-laugh fa-spin' />\n        <h1 className='JokeList-title'>Loading...</h1>\n      </div>\n    );\n\n  let sortedJokes = jokes.sort((a, b) => b.votes - a.votes);\n\n  return (\n    <div className='JokeList'>\n      <div className='JokeList-sidebar'>\n        <h1 className='JokeList-title'>\n          <span>Dad</span> Jokes\n        </h1>\n        <img\n          src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg'\n          alt=''\n        />\n        <button className='JokeList-getmore' onClick={fetchJokes}>\n          Fetch Jokes\n        </button>\n      </div>\n\n      <div className='JokeList-jokes'>\n        {sortedJokes.map(joke => (\n          <Joke\n            key={joke.id}\n            {...joke}\n            upVote={handleVote(1)(joke.id)}\n            downVote={handleVote(-1)(joke.id)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default JokeList;\n","import React from 'react';\nimport './App.css';\nimport JokeList from './JokeList';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}